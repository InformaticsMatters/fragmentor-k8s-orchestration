---

# Assert the play's been named

- name: Assert play named
  assert:
    that: fp_play|string != 'SetMe'
    fail_msg: You must set 'fp_play'

# Assert nextflow parameters

- name: Assert queue size
  assert:
    that: fp_nextflow_executor_queue_size|int > 0
    fail_msg: You must set a sensible 'fp_nextflow_executor_queue_size'

# Assert the Kubernetes config has been named and exists

- name: Assert kubernetes configuration file is named
  assert:
    that: fp_kubeconfig_file|string != 'SetMe'
    fail_msg: You must set 'fp_kubeconfig_file'

- name: Display kubernetes configuration file name
  debug:
    var: fp_kubeconfig_file

- name: Stat kubernetes configuration file
  stat:
    path: "{{ fp_kubeconfig_file }}"
  register: stat_kubeconfig

- name: Assert kubernetes configuration file looks sensible
  assert:
    that:
    - stat_kubeconfig.stat.exists
    - stat_kubeconfig.stat.readable
    - stat_kubeconfig.stat.size > 100
    - stat_kubeconfig.stat.isreg
    fail_msg: Are you sure '{{ fp_kubeconfig_file }}' is a Kubernetes config file?

# Assert AWS credentials have been defined

- name: Assert AWS variables have been set named
  assert:
    that:
    - aws_access_key_id|string|length > 0
    - aws_secret_access_key|string|length > 0
    fail_msg: You must provide AWS credentials

# Check the namespace and pgcopy PVCs exist

- name: Get namespace ({{ fp_namespace }})
  k8s_info:
    kind: Namespace
    name: "{{ fp_namespace }}"
  register: ns_result

- name: Assert namespace exists
  assert:
    that: ns_result.resources|length == 1
    fail_msg: The {{ fp_namespace }} namespace does not exist

- name: Get pgcopy pvc ({{ fp_pgcopy_pvc_name }})
  k8s_info:
    kind: PersistentVolumeClaim
    namespace: "{{ fp_namespace }}"
    name: "{{ fp_pgcopy_pvc_name }}"
  register: pvc_result

- name: Assert pgcopy pvc exists
  assert:
    that: pvc_result.resources|length == 1
    fail_msg: The pgcopy pvc ({{ fp_pgcopy_pvc_name }}) does not exist

# Create basic materials

# The parameter file is read into a variable here.
# 'file' replaces new-line instances by '\n' so to
# reproduce the original content, with line-feeds we '|replace('\n', '\\n')'

- name: Set parameters from file ({{ fp_parameter_file }})
  set_fact:
    parameters_fact: "{{ lookup('file', '{{ fp_parameter_file }}') }}"

- name: Display parameter file
  debug:
    var: fp_parameter_file

- name: Display parameter file content
  debug:
    var: parameters_fact.splitlines()

- name: Set kubeconfig from file ({{ fp_kubeconfig_file }})
  set_fact:
    kubeconfig_fact: "{{ lookup('file', '{{ fp_kubeconfig_file }}') }}"

- name: Display kubeconfig filename
  debug:
    var: fp_kubeconfig_file

- name: Display player image
  debug:
    msg: Player image is {{ fp_image_registry }}/{{ fp_image_name }}:{{ fp_image_tag }}

# An 'Are you sure Prompt'...

- name: Are you sure you want to continue?
  pause:
    prompt: "Are you sure you want to run this '{{ fp_play }}' play? Type 'yes' to continue"
  register: continue_response

- assert:
    that: continue_response.user_input == 'yes'
    fail_msg: "You didn't type 'yes'. Phew, that was close!"

# Not allowed to run a new 'play' if one is currently running.
#
# See https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/
# for a list of possible phases. We want anything that looks like it
# may not have finished.
#
# Sadly field selectors use logical AND so we need
# to ask a number of questions...

- name: Get unfinished player Job Pods
  k8s_info:
    kind: Pod
    namespace: "{{ fp_namespace }}"
    label_selectors:
    - name=fragmentor-player
    field_selectors:
    - status.phase={{ item }}
  loop:
  - Pending
  - Running
  - Unknown
  register: pods_result

- name: Collect names of all player Job Pods not complete
  set_fact:
    active_pods: "{{ pods_result | json_query('results[*].resources[*].metadata.name') | flatten }}"

- name: Display collected Pod results
  debug:
    var: pods_result
  when: active_pods|length > 0

- name: Display incomplete player Job Pod nmaes
  debug:
    var: active_pods
  when: active_pods|length > 0

- name: Assert no incomplete player Job Pods
  assert:
    that: active_pods|length == 0
    fail_msg: A play is still running. You must wait.

- name: Wipe Pods
  include_tasks: wipe-pods.yaml

# Go...

- name: Create DockerHub image pull secret
  k8s:
    definition: "{{ lookup('template', 'secret-dh-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_namespace: "{{ fp_namespace }}"
    pull_secret: "{{ fp_dockerhub_pullsecret }}"
  when: fp_dockerhub_pullsecret|string|length > 0

- name: Create namespace material
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - serviceaccount
  - role
  - rolebinding-role-sa
  - limitrange
  - configmap-nextflow-config
  - configmap-parameters
  - configmap-kubeconfig

# Check storage class exists
# and create the volume claim

- name: Get {{ fp_work_volume_storageclass }} StorageClass
  k8s_info:
    kind: StorageClass
    name: "{{ fp_work_volume_storageclass }}"
  register: sc_result
  when: fp_work_volume_storageclass != " "

- name: Assert {{ fp_work_volume_storageclass }} StorageClass
  assert:
    that: sc_result.resources|length == 1
    fail_msg: The {{ fp_work_volume_storageclass }} StorageClass must be available on the cluster
  when: fp_work_volume_storageclass != " "

- name: Create work-directory volume claim
  k8s:
    definition: "{{ lookup('template', 'pvc.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Deploy the application...

- name: Remove prior fragmentor Job
  k8s:
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    state: absent
    wait: yes
    wait_timeout: "{{ pod_ready_timeout }}"

- name: Deploy new fragmentor Job
  k8s:
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ pod_ready_timeout }}"
